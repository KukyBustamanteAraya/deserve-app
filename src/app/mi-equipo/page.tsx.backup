'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { getBrowserClient } from '@/lib/supabase/client';
import { CustomizeBanner } from '@/components/customize/CustomizeBanner';
import { PlayerDashboard } from '@/components/dashboard/PlayerDashboard';
import { ManagerDashboard } from '@/components/dashboard/ManagerDashboard';
import { InstitutionManagerDashboard } from '@/components/dashboard/InstitutionManagerDashboard';
import { TeamSetupModal, type TeamSetupData } from '@/components/team/TeamSetupModal';
import { TeamSettingsButton } from '@/components/team/TeamSettingsButton';
import { LoadingPage } from '@/components/ui/LoadingSpinner';
import { useTeamMembers, useDesignRequests, useOrders } from '@/hooks/api';
import { TEAM_PAGE_SAFE_MODE } from '@/lib/flags';
import { logger } from '@/lib/logger';
import type { Order } from '@/types/orders';

interface Team {
  id: string;
  slug: string;
  name: string;
  colors: {
    primary: string;
    secondary: string;
    accent: string;
  };
  logo_url?: string;
  owner_id: string;
  created_at: string;
  team_type?: 'single_team' | 'institution';
  sports?: string[];
  setup_completed?: boolean;
}

interface TeamMembership {
  team_id: string;
  user_id: string;
  role: string;
  team: Team;
}

interface TeamMember {
  user_id: string;
  role: string;
  profiles?: {
    email: string;
    full_name?: string;
  };
}

interface DesignRequest {
  id: string;
  status: string;
  product_name: string;
  product_slug: string;
  sport_slug: string;
  created_at: string;
  output_url?: string;
  mockup_urls?: string[];
  primary_color: string;
  secondary_color: string;
  accent_color: string;
  order_id?: string;
  user_type?: string; // 'player' or 'manager'
  approval_status?: string;
}

export default function MyTeamPage() {
  // Safe mode check - early return if enabled
  if (TEAM_PAGE_SAFE_MODE) {
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-2xl mx-auto">
          <div className="bg-white rounded-lg shadow-sm p-8">
            <h1 className="text-2xl font-semibold text-gray-900 mb-4">Mi Equipo (Safe Mode)</h1>
            <p className="text-sm text-gray-600 mb-4">
              Team page is temporarily limited while we fix a regression.
            </p>
            <a
              href="/"
              className="inline-block px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              Back to Home
            </a>
          </div>
        </div>
      </div>
    );
  }

  const router = useRouter();
  const searchParams = useSearchParams();
  const supabase = getBrowserClient();

  // Get team ID from URL params (for team switching)
  const teamIdFromUrl = searchParams.get('team');

  // Core team state (still using useState for team loading from Supabase)
  const [user, setUser] = useState<any>(null);
  const [allTeams, setAllTeams] = useState<TeamMembership[]>([]);
  const [currentTeam, setCurrentTeam] = useState<Team | null>(null);
  const [currentUserRole, setCurrentUserRole] = useState<string>('player');
  const [loading, setLoading] = useState(true);

  // UI-only state (modals, celebration, etc.)
  const [showCelebration, setShowCelebration] = useState(false);
  const [showTeamSwitcher, setShowTeamSwitcher] = useState(false);
  const [showCreateTeamModal, setShowCreateTeamModal] = useState(false);
  const [showTeamSetupModal, setShowTeamSetupModal] = useState(false);
  const [newTeamName, setNewTeamName] = useState('');

  // SWR hooks for real-time data (replaces manual state + useEffect)
  const { members, isLoading: membersLoading } = useTeamMembers(currentTeam?.id || null);
  const { designRequests, isLoading: designRequestsLoading, mutate: mutateDesignRequests } = useDesignRequests({
    teamId: currentTeam?.id || null,
  });
  const { orders, isLoading: ordersLoading } = useOrders();

  // Derived values
  const shareLink = currentTeam ? `${typeof window !== 'undefined' ? window.location.origin : ''}/join/${currentTeam.slug}` : '';

  // Determine dashboard type based on team composition
  const [dashboardType, setDashboardType] = useState<'player' | 'manager'>('player');
  const [manualOverride, setManualOverride] = useState(false);

  // ✅ FIX: Load from localStorage after mount (not in useState initializer)
  // This prevents SSR/CSR hydration mismatches
  useEffect(() => {
    const saved = localStorage.getItem('dashboardType') as 'player' | 'manager';
    const override = localStorage.getItem('manualOverride') === 'true';
    if (saved) setDashboardType(saved);
    if (override) setManualOverride(override);
  }, []);

  useEffect(() => {
    loadAllTeams();
  }, []);

  // Watch for team ID changes in URL (from header dropdown)
  useEffect(() => {
    if (teamIdFromUrl && allTeams.length > 0) {
      const membership = allTeams.find((m) => m.team.id === teamIdFromUrl);
      if (membership && membership.team.id !== currentTeam?.id) {
        setCurrentTeam(membership.team);
        setCurrentUserRole(membership.role);
      }
    }
  }, [teamIdFromUrl, allTeams]);

  // Auto-detect dashboard type when team data changes
  useEffect(() => {
    if (!currentTeam || !members || !designRequests || manualOverride) return;

    // Determine dashboard type based on:
    // 1. Current user's role
    // 2. Team size
    // 3. Design request user_type
    const isManager = currentUserRole === 'owner' || currentUserRole === 'manager';
    const hasManagerDesigns = designRequests.some((dr) => dr.user_type === 'manager');
    const isLargeTeam = (members.length || 0) > 15;

    if (isManager || hasManagerDesigns || isLargeTeam) {
      setDashboardType('manager');
    } else {
      setDashboardType('player');
    }
  }, [currentTeam, members, designRequests, currentUserRole, manualOverride]);

  // Check for celebration
  useEffect(() => {
    const isNewTeam = sessionStorage.getItem('newTeamCreated');
    if (isNewTeam === 'true') {
      setTimeout(() => setShowCelebration(true), 500);
      setTimeout(() => setShowCelebration(false), 3500);
      sessionStorage.removeItem('newTeamCreated');
    }
  }, []);

  // Poll for rendering designs (SWR will handle revalidation automatically)
  useEffect(() => {
    const hasRendering = designRequests?.some((dr) => dr.status === 'rendering');
    if (hasRendering) {
      const interval = setInterval(() => {
        mutateDesignRequests(); // Force revalidation
      }, 5000);
      return () => clearInterval(interval);
    }
  }, [designRequests, mutateDesignRequests]);

  const loadAllTeams = async () => {
    try {
      const { data: { user: currentUser } } = await supabase.auth.getUser();

      if (!currentUser) {
        router.push('/');
        return;
      }

      setUser(currentUser);

      // Get all teams user is a member of
      const { data: memberships } = await supabase
        .from('team_memberships')
        .select('team_id, user_id, role, team:teams(*)')
        .eq('user_id', currentUser.id)
        .order('created_at', { ascending: false });

      if (!memberships || memberships.length === 0) {
        // No teams yet - show create team prompt
        setLoading(false);
        return;
      }

      setAllTeams(memberships as any);

      // Determine which team to show
      let selectedTeam: Team | null = null;
      let userRole = 'player';

      if (teamIdFromUrl) {
        // If team ID in URL, use that
        const membership = memberships.find((m: any) => m.team.id === teamIdFromUrl);
        if (membership) {
          selectedTeam = (membership as any).team;
          userRole = (membership as any).role;
        }
      }

      if (!selectedTeam) {
        // Default to first team (most recently created)
        selectedTeam = (memberships[0] as any).team;
        userRole = (memberships[0] as any).role;
      }

      setCurrentTeam(selectedTeam);
      setCurrentUserRole(userRole);
    } catch (error) {
      logger.error('Error loading teams:', error);
      setLoading(false);
    }
  };

  // Note: loadTeamData removed - SWR hooks now handle members, design requests, and orders automatically

  const switchTeam = (teamId: string) => {
    const membership = allTeams.find((t) => t.team.id === teamId);
    if (membership) {
      setCurrentTeam(membership.team);
      setCurrentUserRole(membership.role);
      setShowTeamSwitcher(false);
      // Update URL without reload
      window.history.pushState({}, '', `/mi-equipo?team=${teamId}`);
    }
  };

  const handleInvite = async (email: string) => {
    if (!email || !currentTeam) return;

    try {
      const token = Math.random().toString(36).substring(2) + Date.now().toString(36);

      await supabase.from('team_invites').insert({
        team_id: currentTeam.id,
        email: email,
        token,
      });

      const response = await fetch('/api/send-team-invite', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: email,
          teamSlug: currentTeam.slug,
          teamName: currentTeam.name,
          inviterName: user?.email || 'teammate',
          token,
        }),
      });

      if (response.ok) {
        alert(`¡Invitación enviada a ${email}!`);
      } else {
        alert('Error al enviar invitación');
      }
    } catch (error) {
      logger.error('Error:', error);
      alert('Error al enviar invitación');
    }
  };

  const handleCreateTeam = async (setupData: TeamSetupData) => {
    if (!user || !newTeamName.trim()) return;

    try {
      const teamSlug = `${newTeamName.toLowerCase().replace(/\s+/g, '-')}-${user.id.substring(0, 8)}`;

      // Create team
      const { data: team, error: teamError } = await supabase
        .from('teams')
        .insert({
          slug: teamSlug,
          name: newTeamName,
          owner_id: user.id,
          created_by: user.id,
          team_type: setupData.teamType,
          sports: setupData.sports,
          setup_completed: true,
          colors: {
            primary: '#1E40AF',
            secondary: '#FFFFFF',
            accent: '#60A5FA',
          },
        })
        .select()
        .single();

      if (teamError) throw teamError;

      // Add creator as owner
      const { error: memberError } = await supabase
        .from('team_memberships')
        .insert({
          team_id: team.id,
          user_id: user.id,
          role: 'owner',
        });

      if (memberError) throw memberError;

      // Close modals and reload teams
      setShowCreateTeamModal(false);
      setShowTeamSetupModal(false);
      setNewTeamName('');
      sessionStorage.setItem('newTeamCreated', 'true');
      await loadAllTeams();
    } catch (error: any) {
      logger.error('Error creating team:', error);
      alert(`Error creating team: ${error.message}`);
    }
  };

  const handleDeleteTeam = async () => {
    if (!currentTeam || !user) return;

    // Verify user is owner
    if (currentUserRole !== 'owner') {
      alert('Solo el propietario puede eliminar el equipo');
      return;
    }

    const confirmDelete = window.confirm(
      `¿Estás seguro de que quieres eliminar "${currentTeam.name}"?\n\nEsta acción es permanente y eliminará:\n- Toda la información del equipo\n- Solicitudes de diseño\n- Membresías de equipo\n\n¿Continuar?`
    );

    if (!confirmDelete) return;

    try {
      // Delete team (cascade will handle memberships, design requests, etc.)
      const { error } = await supabase
        .from('teams')
        .delete()
        .eq('id', currentTeam.id)
        .eq('owner_id', user.id); // Extra safety check

      if (error) throw error;

      alert('Equipo eliminado exitosamente');

      // ✅ FIX: Full page reload instead of state updates to avoid race condition
      // This prevents the HMR cascade failure that causes CSS 404 errors
      window.location.href = '/mi-equipo';
    } catch (error: any) {
      logger.error('Error deleting team:', error);
      alert(`Error al eliminar equipo: ${error.message}`);
    }
  };

  // Handle team name change
  const handleTeamNameChange = async (newName: string) => {
    if (!currentTeam) return;

    try {
      const { error } = await supabase
        .from('teams')
        .update({ name: newName })
        .eq('id', currentTeam.id);

      if (error) throw error;

      // Update local state
      setCurrentTeam({ ...currentTeam, name: newName });

      // Also update in allTeams
      setAllTeams((teams) =>
        teams.map((t) =>
          t.team.id === currentTeam.id
            ? { ...t, team: { ...t.team, name: newName } }
            : t
        )
      );
    } catch (error) {
      logger.error('Error updating team name:', error);
      alert('Error al actualizar el nombre del equipo');
    }
  };

  // Handle logo change
  const handleLogoChange = async (logoDataUrl: string) => {
    if (!currentTeam) return;

    try {
      const { error } = await supabase
        .from('teams')
        .update({ logo_url: logoDataUrl })
        .eq('id', currentTeam.id);

      if (error) throw error;

      // Update local state
      setCurrentTeam({ ...currentTeam, logo_url: logoDataUrl });

      // Also update in allTeams
      setAllTeams((teams) =>
        teams.map((t) =>
          t.team.id === currentTeam.id
            ? { ...t, team: { ...t.team, logo_url: logoDataUrl } }
            : t
        )
      );
    } catch (error) {
      logger.error('Error updating team logo:', error);
      alert('Error al actualizar el logo del equipo');
    }
  };

  // Show loading state while initial team data loads
  if (loading) {
    return <LoadingPage message="Cargando tu equipo..." />;
  }

  if (!currentTeam) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
        <div className="max-w-2xl w-full">
          <div className="bg-white rounded-xl shadow-lg p-8 text-center">
            <div className="mb-6">
              <div className="text-6xl mb-4">👥</div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">¡Bienvenido a Mi Equipo!</h1>
              <p className="text-gray-600">Aún no tienes ningún equipo. Crea uno para empezar.</p>
            </div>

            {!showCreateTeamModal ? (
              <div className="space-y-4">
                <button
                  onClick={() => setShowCreateTeamModal(true)}
                  className="w-full px-8 py-4 bg-[#e21c21] text-white rounded-lg font-semibold hover:bg-black transition-colors shadow-lg hover:shadow-xl"
                >
                  Crear Equipo
                </button>
                <button
                  onClick={() => router.push('/catalog')}
                  className="w-full px-8 py-4 border-2 border-gray-300 text-gray-700 rounded-lg font-semibold hover:border-gray-400 hover:bg-gray-50 transition-colors"
                >
                  Ver Catálogo Primero
                </button>
              </div>
            ) : (
              <div className="space-y-4">
                <div className="text-left">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Nombre del Equipo
                  </label>
                  <input
                    type="text"
                    value={newTeamName}
                    onChange={(e) => setNewTeamName(e.target.value)}
                    placeholder="Mi Equipo"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    autoFocus
                  />
                </div>
                <button
                  onClick={() => {
                    if (!newTeamName.trim()) {
                      alert('Por favor ingresa un nombre para el equipo');
                      return;
                    }
                    // Name is valid, open team setup modal
                    setShowTeamSetupModal(true);
                  }}
                  disabled={!newTeamName.trim()}
                  className="w-full px-8 py-4 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Continuar
                </button>
                <button
                  onClick={() => {
                    setShowCreateTeamModal(false);
                    setNewTeamName('');
                  }}
                  className="w-full px-8 py-4 text-gray-600 hover:text-gray-900 transition-colors"
                >
                  Cancelar
                </button>
              </div>
            )}
          </div>

          {/* Team Setup Modal */}
          {showTeamSetupModal && (
            <TeamSetupModal
              isOpen={true}
              onComplete={handleCreateTeam}
            />
          )}
        </div>
      </div>
    );
  }

  // Show team switcher if user has multiple teams and showTeamSwitcher is true
  if (showTeamSwitcher && allTeams.length > 1) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
        <div className="max-w-3xl w-full">
          <div className="bg-white rounded-xl shadow-lg p-8">
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Mis Equipos</h1>
            <p className="text-gray-600 mb-8">Selecciona un equipo para ver su panel de control</p>

            <div className="space-y-4">
              {allTeams.map((membership) => {
                const team = membership.team;
                const role = membership.role;
                const isInstitution = team.team_type === 'institution';

                return (
                  <button
                    key={team.id}
                    onClick={() => switchTeam(team.id)}
                    className="w-full p-6 border-2 border-gray-200 rounded-xl hover:border-blue-500 hover:bg-blue-50 transition-all text-left group"
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <span className="text-3xl">{isInstitution ? '🏫' : '👥'}</span>
                          <div>
                            <h3 className="text-xl font-bold text-gray-900 group-hover:text-blue-600 transition-colors">
                              {team.name}
                            </h3>
                            <p className="text-sm text-gray-600 capitalize">
                              {isInstitution ? 'Institución' : 'Equipo Individual'}
                            </p>
                          </div>
                        </div>

                        <div className="ml-12 space-y-1">
                          <p className="text-sm text-gray-600">
                            <span className="font-medium">Tu rol:</span>{' '}
                            <span className="capitalize">{role === 'owner' ? 'Propietario' : role}</span>
                          </p>
                          {team.sports && team.sports.length > 0 && (
                            <p className="text-sm text-gray-600">
                              <span className="font-medium">Deportes:</span> {team.sports.join(', ')}
                            </p>
                          )}
                        </div>
                      </div>

                      <svg className="w-6 h-6 text-gray-400 group-hover:text-blue-600 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                      </svg>
                    </div>
                  </button>
                );
              })}
            </div>

            <div className="mt-8 pt-6 border-t border-gray-200">
              <button
                onClick={() => setShowCreateTeamModal(true)}
                className="w-full px-6 py-3 bg-[#e21c21] text-white rounded-lg font-semibold hover:bg-black transition-colors"
              >
                + Crear Nuevo Equipo
              </button>
            </div>
          </div>

          {/* Team Setup Modal for creating another team */}
          {showCreateTeamModal && (
            <div className="fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4">
              <div className="bg-white rounded-xl shadow-2xl max-w-md w-full p-8">
                <h2 className="text-2xl font-bold text-gray-900 mb-6">Crear Nuevo Equipo</h2>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Nombre del Equipo
                    </label>
                    <input
                      type="text"
                      value={newTeamName}
                      onChange={(e) => setNewTeamName(e.target.value)}
                      placeholder="Mi Equipo"
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      autoFocus
                    />
                  </div>
                  <div className="flex gap-3">
                    <button
                      onClick={() => {
                        setShowCreateTeamModal(false);
                        setNewTeamName('');
                      }}
                      className="flex-1 px-6 py-3 border border-gray-300 text-gray-700 rounded-lg font-semibold hover:bg-gray-50 transition-colors"
                    >
                      Cancelar
                    </button>
                    <button
                      onClick={() => {
                        if (!newTeamName.trim()) {
                          alert('Por favor ingresa un nombre para el equipo');
                          return;
                        }
                        // Name is valid, open team setup modal
                        setShowTeamSetupModal(true);
                      }}
                      disabled={!newTeamName.trim()}
                      className="flex-1 px-6 py-3 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition-colors disabled:opacity-50"
                    >
                      Continuar
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Team Setup Modal */}
          {showTeamSetupModal && (
            <TeamSetupModal
              isOpen={true}
              onComplete={handleCreateTeam}
            />
          )}
        </div>
      </div>
    );
  }

  // Show loading state while SWR data is loading
  const isDataLoading = membersLoading || designRequestsLoading || ordersLoading;
  if (isDataLoading && !members && !designRequests && !orders) {
    return <LoadingPage message="Cargando datos del equipo..." />;
  }

  // Check if current team is institution type
  const isInstitutionTeam = currentTeam.team_type === 'institution';

  // For institution-type teams, ALWAYS use InstitutionManagerDashboard
  if (isInstitutionTeam && user) {
    return (
      <div className="min-h-screen bg-gray-50">
        <InstitutionManagerDashboard
          team={currentTeam}
          currentUserId={user.id}
          shareLink={shareLink}
          onInvite={handleInvite}
          members={members || []}
        />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Celebration */}
      {showCelebration && (
        <div className="fixed inset-0 z-50 pointer-events-none">
          <div className="absolute inset-0 overflow-hidden">
            {[...Array(50)].map((_, i) => (
              <div
                key={i}
                className="absolute animate-fall"
                style={{
                  left: `${Math.random() * 100}%`,
                  top: `-${Math.random() * 20}%`,
                  animationDelay: `${Math.random() * 3}s`,
                  animationDuration: `${3 + Math.random() * 2}s`,
                }}
              >
                <div
                  className="w-3 h-3 rounded-full"
                  style={{
                    backgroundColor: [currentTeam.colors.primary, currentTeam.colors.secondary, currentTeam.colors.accent][i % 3],
                  }}
                />
              </div>
            ))}
          </div>
          <div className="absolute top-1/3 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
            <div className="bg-white rounded-2xl shadow-2xl px-12 py-8 border-4" style={{ borderColor: currentTeam.colors.primary }}>
              <div className="text-6xl mb-4">🎉</div>
              <h2 className="text-3xl font-bold mb-2" style={{ color: currentTeam.colors.primary }}>
                ¡Bienvenido!
              </h2>
              <p className="text-gray-600">Tu diseño está siendo procesado</p>
            </div>
          </div>
        </div>
      )}

      {/* Team Switcher Dropdown */}
      {showTeamSwitcher && allTeams.length > 1 && (
        <div className="fixed inset-0 z-40 bg-black/50" onClick={() => setShowTeamSwitcher(false)}>
          <div
            className="absolute top-20 left-1/2 transform -translate-x-1/2 w-80 bg-white rounded-lg shadow-xl p-4"
            onClick={(e) => e.stopPropagation()}
          >
            <h3 className="text-lg font-bold mb-4">Cambiar de Equipo</h3>
            <div className="space-y-2 max-h-96 overflow-y-auto">
              {allTeams.map((membership) => (
                <button
                  key={membership.team.id}
                  onClick={() => switchTeam(membership.team.id)}
                  className={`w-full text-left p-3 rounded-lg border-2 transition-all ${
                    currentTeam.id === membership.team.id
                      ? 'border-blue-500 bg-blue-50'
                      : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                  }`}
                >
                  <div className="flex items-center gap-3">
                    <div className="flex gap-1">
                      <div className="w-3 h-8 rounded" style={{ backgroundColor: membership.team.colors.primary }} />
                      <div className="w-3 h-8 rounded" style={{ backgroundColor: membership.team.colors.secondary }} />
                    </div>
                    <div>
                      <p className="font-semibold">{membership.team.name}</p>
                      <p className="text-xs text-gray-600 capitalize">{membership.role}</p>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Banner */}
      <CustomizeBanner
        teamName={currentTeam.name}
        customColors={currentTeam.colors}
        customLogoUrl={currentTeam.logo_url}
        onTeamNameChange={handleTeamNameChange}
        onLogoChange={handleLogoChange}
        readonly={false}
      />

      {/* Team Switcher Button - Positioned below banner */}
      {allTeams.length > 1 && (
        <div className="fixed top-24 right-4 z-40">
          <button
            onClick={() => setShowTeamSwitcher(!showTeamSwitcher)}
            className="px-4 py-2 bg-white hover:bg-gray-50 rounded-lg shadow-lg flex items-center gap-2 text-sm font-medium border border-gray-200"
          >
            <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h12M8 12h12M8 17h12M3 7h.01M3 12h.01M3 17h.01" />
            </svg>
            {allTeams.length} Equipos
          </button>
        </div>
      )}

      {/* Team Settings Button */}
      <div className="bg-white border-b border-gray-200 shadow-sm">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <TeamSettingsButton
            isOwner={currentUserRole === 'owner'}
            teamName={currentTeam.name}
            onDelete={handleDeleteTeam}
            onSwitchTeams={() => setShowTeamSwitcher(true)}
            onCreateAnother={() => setShowCreateTeamModal(true)}
            hasMultipleTeams={allTeams.length > 1}
          />
        </div>
      </div>

      {/* Dashboard Type Toggle (for testing/preference) */}
      <div className="max-w-7xl mx-auto px-4 pt-32 pb-2">
        <div className="flex justify-end items-center gap-2 mb-2">
          <div className="flex gap-2">
          <button
            onClick={() => {
              setDashboardType('player');
              setManualOverride(true);
              localStorage.setItem('dashboardType', 'player');
              localStorage.setItem('manualOverride', 'true');
            }}
            className={`px-3 py-1 text-xs rounded-lg font-medium transition-colors ${
              dashboardType === 'player'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
            }`}
          >
            Vista Jugador
          </button>
          <button
            onClick={() => {
              setDashboardType('manager');
              setManualOverride(true);
              localStorage.setItem('dashboardType', 'manager');
              localStorage.setItem('manualOverride', 'true');
            }}
            className={`px-3 py-1 text-xs rounded-lg font-medium transition-colors ${
              dashboardType === 'manager'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
            }`}
          >
            Vista Manager
          </button>
          </div>
        </div>
      </div>

      {/* Render appropriate dashboard based on type */}
      {dashboardType === 'player' ? (
        <PlayerDashboard
          team={currentTeam}
          designRequests={designRequests || []}
          orders={orders?.orders || []}
          members={members || []}
          currentUserId={user.id}
          shareLink={shareLink}
          onInvite={handleInvite}
        />
      ) : (
        <ManagerDashboard
          team={currentTeam}
          designRequests={designRequests || []}
          orders={orders?.orders || []}
          members={members || []}
          currentUserId={user.id}
          shareLink={shareLink}
          onInvite={handleInvite}
        />
      )}
    </div>
  );
}
