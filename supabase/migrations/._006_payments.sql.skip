-- Migration: 006_payments.sql
-- Description: Payment system with Mercado Pago integration
-- Author: Claude Code
-- Date: 2025-09-30

-- =====================================================
-- PAYMENTS TABLES
-- =====================================================

-- Main payments table
create table if not exists public.payments (
  id uuid primary key default gen_random_uuid(),
  order_id uuid not null references public.orders(id) on delete cascade,
  provider text not null check (provider in ('mercadopago', 'stripe')),
  external_id text,                -- MP payment id (string)
  preference_id text,              -- MP preference id
  status text not null default 'pending' check (status in ('pending', 'approved', 'rejected', 'cancelled', 'refunded')),
  amount_cents int not null check (amount_cents >= 0),
  currency char(3) not null default 'CLP',
  raw jsonb,                       -- snapshot from provider
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- Payment events for audit trail
create table if not exists public.payment_events (
  id uuid primary key default gen_random_uuid(),
  payment_id uuid not null references public.payments(id) on delete cascade,
  event text not null,             -- 'preference.created','webhook.received','payment.approved', etc.
  payload jsonb,
  created_at timestamptz not null default now()
);

-- =====================================================
-- ALTER EXISTING TABLES (IF NEEDED)
-- =====================================================

-- Add missing columns to existing payments table if they don't exist
do $$
begin
  if not exists (select 1 from information_schema.columns where table_schema = 'public' and table_name = 'payments' and column_name = 'external_id') then
    alter table public.payments add column external_id text;
  end if;
  if not exists (select 1 from information_schema.columns where table_schema = 'public' and table_name = 'payments' and column_name = 'preference_id') then
    alter table public.payments add column preference_id text;
  end if;
end $$;

-- Add missing columns to existing payment_events table if they don't exist
do $$
begin
  if not exists (select 1 from information_schema.columns where table_schema = 'public' and table_name = 'payment_events' and column_name = 'event') then
    alter table public.payment_events add column event text not null default 'unknown';
  end if;
end $$;

-- =====================================================
-- INDEXES
-- =====================================================

create index if not exists payments_order_id_idx on public.payments(order_id);
create index if not exists payments_provider_external_id_idx on public.payments(provider, external_id);
create index if not exists payments_preference_id_idx on public.payments(preference_id);
create index if not exists payments_status_idx on public.payments(status);
create index if not exists payment_events_payment_id_idx on public.payment_events(payment_id);
create index if not exists payment_events_event_idx on public.payment_events(event);

-- =====================================================
-- ROW LEVEL SECURITY
-- =====================================================

-- Enable RLS
alter table public.payments enable row level security;
alter table public.payment_events enable row level security;

-- Payments policies
create policy "payments_select_own" on public.payments
  for select
  using (
    exists (
      select 1 from public.orders o
      where o.id = payments.order_id
      and o.user_id = auth.uid()
    )
  );

-- Payment events policies
create policy "payment_events_select_own" on public.payment_events
  for select
  using (
    exists (
      select 1 from public.payments p
      join public.orders o on o.id = p.order_id
      where p.id = payment_events.payment_id
      and o.user_id = auth.uid()
    )
  );

-- =====================================================
-- TRIGGERS
-- =====================================================

-- Auto-update updated_at timestamp
create or replace function public.update_payments_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create trigger payments_updated_at_trigger
  before update on public.payments
  for each row
  execute function public.update_payments_updated_at();

-- =====================================================
-- COMPLETION MESSAGE
-- =====================================================

-- Log completion
do $$
begin
  raise notice 'Migration 006_payments.sql completed successfully!';
  raise notice 'Created tables:';
  raise notice '- payments (with RLS and provider support)';
  raise notice '- payment_events (audit trail with RLS)';
  raise notice 'Added indexes for performance';
  raise notice 'Ready for Mercado Pago integration';
end $$;